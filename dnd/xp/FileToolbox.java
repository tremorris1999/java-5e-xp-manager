package dnd.xp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import dnd.xp.characters.Character;
import dnd.xp.gui.MainFrame;

public class FileToolbox
{
	private static Scanner scan;

	public static File openFile(final MainFrame mainFrame)
	{
		try
		{
			JFileChooser choice = new JFileChooser();
			choice.setFileFilter(new FileNameExtensionFilter("DATA Files", "data"));
			choice.showOpenDialog(null);
			File file = choice.getSelectedFile();
			if (file.exists())
			{
				mainFrame.getTrackerPanel().log(file.getName() + "\r\n");
				return file;
			}
			else
				mainFrame.getTrackerPanel().log("Invalid file!\r\n");
			return null;
		}
		catch (Exception e)
		{
			mainFrame.getTrackerPanel().log("File retrieval failed!\r\n");
			return null;
		}
	}

	public static void save(final File file, final dnd.xp.LinkedList characters) throws IOException
	{
		PrintStream fileOut = new PrintStream(file);
		if(characters.getSize() > 0)
		{
			dnd.xp.LinkedList.Node cur = characters.head.next;
			for ( ; cur != null; cur = cur.next)
			{
				fileOut.append(cur.character.getName() + "\n");
				fileOut.append(Integer.toString(cur.character.getLevel()) + "\n");
				fileOut.append(Double.toString(cur.character.getXp()) + "\n");
			}
		}
		fileOut.close();
	}

	public static dnd.xp.LinkedList buildCharacterList(final File fileIn) throws FileNotFoundException
	{
		dnd.xp.LinkedList list = new dnd.xp.LinkedList();
		scan = new Scanner(fileIn);
		while(scan.hasNext())
		{
			Character character = new Character(scan.nextLine(), Integer.parseInt(scan.nextLine()), Double.parseDouble(scan.nextLine()));
			list.addFirst(character);
		}
		return list;
	}

	public static void defaultPathSetup()
	{
		File dir = new File("default/output");
		if (!dir.exists())
			dir.mkdirs();
		dir = new File("default/input");
		if (!dir.exists())
			dir.mkdirs();
		dir = new File("pref");
		if(!dir.exists())
			dir.mkdir();
	}

	public static String getPrefPathIn() throws IOException
	{
		File path = new File("pref/in.path");
		if(!path.exists())
		{
			path.createNewFile();
			PrintStream writer = new PrintStream(path);
			writer.append("default/input/input.data");
			writer.close();
			return "default/input/input.data";
		}
		else
		{
			scan = new Scanner(path);
			String out = scan.nextLine();
			return out;
		}
	}

	public static String getPrefPathOut() throws IOException
	{
		File path = new File("pref/out.path");
		if(!path.exists())
		{
			path.createNewFile();
			PrintStream writer = new PrintStream(path);
			writer.append("default/output/output.data");
			writer.close();
			return "default/output/output.data";
		}
		else
		{
			scan = new Scanner(path);
			String out = scan.nextLine();
			return out;
		}
	}

	public static void setPrefPathIn(final String path) throws IOException
	{
		File in = new File("pref/in.path");
		FileWriter fw = new FileWriter(in, false);
		fw.write(path.trim());
		fw.close();
	}

	public static void setPrefPathOut(final String path) throws IOException
	{
		File out = new File("pref/out.path");
		FileWriter fw = new FileWriter(out, false);
		fw.write(path.trim());
		fw.close();
	}

	public static void generateReadMe() throws IOException
	{
		File out = new File("README.txt");
		out.createNewFile();
		FileWriter fw = new FileWriter(out, false);
		String readme = ""
				+ "********************************************************************\r\n"
				+ "Fifth Edition XP Manager version 1.0.0\r\n"
				+ "\t\tCreated by Trevor Morris\r\n"
				+ "********************************************************************\r\n\n"
				+ "This is available to anyone at the low price of free-ninety-free.\r\n"
				+ "I put way more work into this than I probably should have, but here we are.\r\n\r\n"
				+ "Anyway, this is my first project attempting to utilize the javax.swing library and I\r\n"
				+ "had a ton of (mostly) fun making it. This one goes out to all my fellow lazy POS\r\n"
				+ "DMs. One less math to do constantly.\r\n\r\n\r\n"
				+ "Tips:\r\n"
				+ "\t- In the generated folder 'default/output' exists a file output.data, rename this\r\n"
				+ "\tfile and store close by so you can have an output file for every group you may run.\r\n"
				+ "\tJust use the built-in File > Open and pick the .data file for the group/game.\r\n\r\n"
				+ "\t- To add XP to multiple characters, hold CTRL when selecting from the list.\r\n\r\n"
				+ "\t- If you really care, all files generated by this application are in fact\r\n"
				+ "\tunencrypted. Feel free to change the extension back to '.txt' to look at the files\r\n"
				+ "\tinvolved. It's also my first time using file IO that carries over each run.\r\n\r\n\r\n"
				+ "Thanks everyone. Enjoy!\r\n"
				+ "\t - Trevor";
		fw.write(readme);
		fw.close();
	}
}
